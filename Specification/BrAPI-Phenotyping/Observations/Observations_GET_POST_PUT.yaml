info:
  title: BrAPI
  version: ''
openapi: 3.0.0
paths:
  /observations:
    get:
      summary: Get a filtered set of Observations 
      description: |-
        Retrieve all observations where there are measurements for the given observation variables.

        observationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm
      parameters:
      - description: The unique ID of an Observation Unit
        in: query
        name: observationUnitDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a germplasm (accession) to filter on
        in: query
        name: germplasmDbId
        required: false
        schema:
          type: string
      - description: The unique ID of an observation variable
        in: query
        name: observationVariableDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a studies to filter on
        in: query
        name: studyDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a location where these observations were collected
        in: query
        name: locationDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a trial to filter on
        in: query
        name: trialDbId
        required: false
        schema:
          type: string
      - description: The unique ID of a program to filter on
        in: query
        name: programDbId
        required: false
        schema:
          type: string
      - description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        in: query
        name: seasonDbId
        required: false
        schema:
          type: string
      - description: The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
        in: query
        name: observationLevel
        required: false
        schema:
          type: string
      - description: Timestamp range start
        in: query
        name: observationTimeStampRangeStart
        required: false
        schema:
          format: date-time
          type: string
      - description: Timestamp range end
        in: query
        name: observationTimeStampRangeEnd
        required: false
        schema:
          format: date-time
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/authorizationHeader'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      tags:
      - Observations
    post:
      summary: Add new Observation entities
      description: |-
        Add new Observation entities
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ObservationNewRequest'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      tags:
      - Observations
    put:
      summary: Update multiple Observation entities 
      description: |-
        Update multiple Observation entities simultaneously with a single call
        
        Include as many `observationDbIds` in the request as needed.
        
        Note - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON.
      parameters:
      - $ref: '#/components/parameters/authorizationHeader'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                  $ref: '#/components/schemas/ObservationNewRequest'
            example:
              '<observationDbId_1>':
                germplasmDbId: 2408ab11
                germplasmName: A0000001
                observationTimeStamp: 2019-06-28T18:49:43.516Z
                observationUnitDbId: 598111d4
                observationUnitName: Plot 1
                observationVariableDbId: c403d107
                observationVariableName: Plant Height in meters
                collector: 917d3ae0
                studyDbId: ef2829db
                uploadedBy: a2f7f60b
                value: '2.3'
              '<observationDbId_2>':
                germplasmDbId: 69310ca4
                germplasmName: A0000438
                observationTimeStamp: 2019-06-28T18:49:43.516Z
                observationUnitDbId: 1177a714
                observationUnitName: Plot 13
                observationVariableDbId: e4f8ba8c
                observationVariableName: Carotenoid
                collector: 03ba8c2c
                studyDbId: 6f9e267d
                uploadedBy: 182c72ad
                value: '2.5'
      responses:
        '200':
          $ref: '#/components/responses/ObservationListResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      tags:
      - Observations
components:
  responses:
    ObservationListResponse:
      content:
        application/json:
          schema:
            title: ObservationListResponse
            type: object
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Observation'
                    type: array
                required:
                - data
                type: object
            required:
            - metadata
            - result
      description: OK
      headers: {}
      
