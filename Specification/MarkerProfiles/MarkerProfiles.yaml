swagger: '2.0'
info:
  version: '1.0'
  title: 'Marker Profiles'
  description: 'BRAPI Marker profiles'
paths:
  /markerprofiles:
     get:
       responses:
         '200':
           description: OK
           headers: {}
           schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata' 
              result:
                type: array
                items:
                  $ref: '#/definitions/markerprofileDescription' 
           examples:
             application/json:
               metadata:
                 pagination:
                   pageSize: 1000
                   currentPage: 0
                   totalCount: 2
                   totalPages: 1
                 status: []
                 datafiles: []
               result:
                 data:
                   - markerprofileDbId: '993'
                     germplasmDbId: '2374'
                     uniqueDisplayName: MyFancyGermplasm
                     sampleDbId: '3937'
                     extractDbId: '3939'
                     analysisMethod: GoldenGate
                     resultCount: 1470
                   - markerprofileDbId: '994'
                     germplasmDbId: '2374'
                     uniqueDisplayName: Germplasm2
                     sampleDbId: '1234'
                     extractDbId: '3939'
                     analysisMethod: GBS
                     resultCount: 1470
       summary: Retrieve Markerprofile Ids
       description: |-
        **Scope**: GENOTYPING.
        **Status**: ACCEPTED.
        **Implemented by**: Germinate
        **Used by**: Flapjack
        </br>
        For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls (marker/allele pairs).
       tags:
         - Marker Profiles
       parameters:
         - name: germplasmDbId
           in: query
           description: 'The server''s internal ids for the Germplasm IDs, as returned by the **Find markerprofile by Germplasm** service.'
           required: false
           type: string
         - name: studyDbId
           in: query
           description: The server's internal id for the StudyDbId
           required: false
           type: string
         - name: sampleDbId
           in: query
           description: The server's internal id for the SampleDbId
           required: false
           type: string
         - name: extractDbId
           in: query
           description: The server's internal id for the ExtractDbId
           required: false
           type: string
         - name: pageSize
           in: query
           description: 'The number of allele call results (marker/allele pairs) to be returned in the response. If multiple experiments are requested, some responses will contain the last results from one experiment followed by the first results from the next.'
           required: false
           type: integer
         - name: page
           in: query
           description: Required if `pageSize` is given; and requires that `pageSize` be given. The page indexing starts at 0 (the first page is 'page'=0)
           required: false
           type: integer
       produces:
         - application/json
  '/markerprofiles/{markerprofileDbId}':
    get:
      responses:
        '200':
          description: OK
          headers: {}
          examples: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata' 
              result:
                type: array
                items:
                  $ref: '#/definitions/markerProfile' 
      summary: Alleles By Markerprofile Id
      description: |-
        **Scope**:GENOTYPING.
        **Status**: ACCEPTED.
        **Implemented by**: Germinate, Cassavabase
        </br>
        For the requested markerprofile ID, returns the allele call for each marker. 
        [Example](http://malt.pw.usda.gov/t3/wheatplus/markerprofiles/1784_99/count?analysisMethod=GoldenGate)
        </br>
        **Allele encodings**
        
        - Unknown data will by default be encoded by "N"
        - Homozygotes are returned as a single occurance, e.g. AA -> A, GG -> G
        - Phased heterozygotes are by default separated by a pipe ("|") and unphased heterozygotes are by default separated by a forward slash ("/")
        - Dominant markers such as DArTs: 1 for present, 0 for absent
        
        **Parameters**
        - If the user would like to use an empty string ("") for any of the parameters, the value should be set to the reserved word "empty_string", e.g. sepUnphased=empty_string.
        
        **Open issue:**
        The pages of data will need to be sorted sensibly in order for the
        requested page to be delivered consistently.  By map or genome position?
        Alphabetically?'
      tags: 
        - Marker Profiles
      parameters:
        - name: markerprofileDbId
          in: path
          description: The server's internal id for the markerprofile
          required: true
          type: string
        - name: expandHomozygotes
          in: query
          description: Should homozygotes NOT be collapsed into a single orrucance?
          required: false
          type: boolean
        - name: unknownString
          in: query
          description: The string to use as a representation for missing data or the reserved word "empty_string".
          required: false
          type: string
        - name: sepPhased
          in: query
          description: The string to use as a separator for phased allele calls or the reserved word "empty_string".
          required: false
          type: string
        - name: sepUnphased
          in: query
          description: The string to use as a separator for unphased allele calls or the reserved word "empty_string".
          required: false
          type: string
        - name: pageSize
          in: query
          description: 'The number of allele call results (marker/allele pairs) to be returned in the response. If multiple experiments are requested, some responses will contain the last results from one experiment followed by the first results from the next.'
          required: false
          type: integer
        - name: page
          in: query
          description: Required if `pageSize` is given; and requires that `pageSize` be given. The page indexing starts at 0 (the first page is 'page'=0)
          required: false
          type: integer
  /allelematrix-search:
    post:
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata' 
              result:
                type: array
                items:
                  $ref: '#/definitions/alleMatrixValues' 
          examples:
            Format TSV:
              metadata:
                pagination:
                  pageSize: 0
                  currentPage: 0
                  totalCount: 0
                  totalPages: 0
                status: []
                datafiles:
                  - 'https://my-fancy-server/files/allelematrix-1234.tsv'
              result:
                data: []
            Format JSON:
              metadata:
                pagination:
                  pageSize: 0
                  currentPage: 0
                  totalCount: 0
                  totalPages: 0
                status: []
                datafiles:
              result:
                data:  
                  - - '1'
                    - '1'
                    - A/B
                  - - '1'
                    - '2'
                    - B
                  - - '2'
                    - '1'
                    - A
                  - - '2'
                    - '2'
                    - A/B 
                
      summary: Scores through POST
      description: |-
        Use POST when parameter size is greater than 2K bytes.

        - If no format is specified, this call returns the data in JSON form.

        - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the "datafiles" field of the "metadata".

        - If more than one format is requested at a time, the server will throw a "501 Not Implemented" error.

        The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)
      tags: 
        - Marker Profiles
      parameters: []
      produces:
        - application/json
    get:
       responses:
         '200':
           description: OK
           headers: {}
           
           schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata' 
              result:
                type: array
                items:
                  $ref: '#/definitions/alleMatrixValues' 
           examples:
             application/json:
               metadata:
                 pagination:
                   pageSize: 1000
                   currentPage: 0
                   totalCount: 1
                   totalPages: 1
                 status: []
                 datafiles: []
               result:
                 data:
                   - - '1'
                     - '1'
                     - A/B
                   - - '1'
                     - '2'
                     - B
                   - - '2'
                     - '1'
                     - A
                   - - '2'
                     - '2'
                     - A/B
       summary: Scores through GET
       tags: 
       - Marker Profiles
       description: |-
         **Status**: ACCEPTED.
         **Implemented by**: Germinate (POST only), Cassavabase
         **Used by**: Flapjack (POST only)
         See <a href="#introduction/search-services">Search Services</a> for additional implementation details.
         </br>
          This uses a more efficient data structure and pagination for large number of markers. 
         </br>
         Use GET when parameter size is less than 2K bytes.
         This method may support asynchronous processing.
       parameters:
        - name: markerprofileDbId
          in: query
          description: The markerprofile db ids. Not Required if 'markerDbId' or 'matrixDbId' is present.
          required: true
          type: array
          items:
            type: string
        - name: markerDbId
          in: query
          description: 'ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if ''markerprofileDbId'' or ''matrixDbId'' is present.'
          required: true
          type: array
          items:
            type: string
        - name: matrixDbId
          in: query
          description: ''
          required: true
          type: array
          items:
            type: string
        - name: format
          in: query
          description: format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported.
          required: false
          type: string
        - name: expandHomozygotes
          in: query
          description: Should homozygotes NOT be collapsed into a single occurrence?
          required: false
          type: boolean
        - name: unknownString
          in: query
          description: The string to use as a representation for missing data or the reserved word "empty_string".
          required: false
          type: string
        - name: sepPhased
          in: query
          description: The string to use as a separator for phased allele calls or the reserved word "empty_string".
          required: false
          type: string
        - name: sepUnphased
          in: query
          description: The string to use as a separator for unphased allele calls or the reserved word "empty_string".
          required: false
          type: string
        - name: pageSize
          in: query
          description: The size of the pages to be returned. Default is `1000`.
          required: false
          type: integer
        - name: page
          in: query
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          required: false
          type: integer
       produces:
         - application/json
  /allelematrices:
    get:
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata' 
              result:
                type: array
                items:
                  $ref: '#/definitions/alleleMatrixDetails' 
      produces:
        - application/json
      tags: 
      - Marker Profiles
      summary: Matrices through GET
      description: |-
        **Status**: Proposed
        **Implemented by**: GOBII
        **Used by**: Flapjack
        </br>
        This resource is used for reading and writing genomic matrices:
        </br>
        GET provides a list of available matrices, optionally filtered by study;
        POST will provide a means for adding new matrices (content TBD).
      parameters:
        - name: studyDbId
          in: query
          description: restricts the list of matrices to a specific study.
          required: true
          type: string
      
          
definitions:
  markerprofileDescription:
    type: object
    properties:
      markerprofileDbId: 
        type: string
      germplasmDbId:
        type: string
      uniqueDisplayName:
        type: string
      sampleDbId:
        type: string
      extractDbId:
        type: string
      analysisMethod:
        type: string
      resultCount:
        type: integer
  markerProfile:
    type: object
    properties:
      markerprofileDbId:
        type: string
        description: |-
          Unique in the database. Can be a catenation of unique IDs for germplasm and extract. **Required**
      germplasmDbId:
        description: |-
          **Required**
        type: string
      analysisMethod:
        type: string
      extractDbId: 
        description: |-
          **Required**
        type: string
      data:
        description: |-
          **Required**
          array of marker-name/score pairs
        type: array
        items:
          type: object
          additionalProperties:
            type: string
      
  alleMatrixValues:
    type: object
    properties:
      data:
        type: array
        description: |-
          Is an array of arrays; each inner array has three entries: ```markerDbId```, ```markerprofileDbId```, ```alleleCall```. Scores have to be represented as described further up. e.g. unknown data as "N", etc. Missing data can be skipped.
        items:
          type: array
          items:
            type: string
  alleleMatrixDetails:
    type: object
    properties:
      name: 
        description: Name of the matrix
        type: string
      mtrixDbId: 
        description: ID of the matrix
        type: string
      description:
        description: How the matrix was generated 
        type: string
      lastUpdated: 
        description: A date format
        type: string
      studyDbId: 
        description: Link to the study where the matrix was produced
        type: string
  status: 
    type: object
    properties:
      code:
        type: string
      message: 
        type: string
  metadata:
    type: object
    properties:
      pagination:
        description: |-
          The pagination object is applicable only when the payload contains a "data" key. It describes the pagination of the data contained in the "data" array, as a way to identify which subset of data is being returned. Pages are zero indexed, so the first page will be page 0 (zero).
        type: object
        properties: 
          totalCount:
            type: integer
          pageSize:
            type: integer
          totalPages: 
            type: integer
          currentPage:
            type: integer
      status:
        description: |-
          The status object contains a list of objects with the keys "code" and "message". If no status is reported, an empty list should be returned. The following are officially accepted status codes: 
          Code|Message|Description
          --|--|--
          asynchid|<arbitrary ID String>|Used for the first part of an asynchornous call, returns an ID string which can be used in a subsequent call to retrieve data or status information.
          asynchstatus|"PENDING"|Indicates an asynchornous call is still working and will not return data yet.
          asynchstatus|"FINISHED"|Indicates an asynchornous call is finished and this response object contains the requested data.
          200|"Success"|Optional status for representing explicitly that the request was accepted and returned without any issue
          40|"No objects found for given parameters"| Error to be returned when there are no objects in the database which match the requested search parameters
          41|"Missing required parameter <parameter name>"| Error to be returned when a required parameter is missing from request
          42|"Could not update values for <object type>"| Error to be returned when the server is unable to store some data submitted
        type: array
        items:
          $ref: '#/definitions/status'
      datafiles:
        description: |-
          The datafiles key contains a list of file paths, which can be relative or complete URLs. These files contain additional information related to the returned object and can be retrieved by a subsequent call. The empty list should be returned if no additional data files are present.
        type: array
        items:
          type: string
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /homonecloco/MarkerProfiles/1.0
schemes:
 - https

  